const e=(e,t)=>{const n=e.validity;for(const[a,s]of Object.entries(t)){if(n[a]&&"function"==typeof s)return s(e);if(n[a])return s}return t.defaultMessage};await Promise.all([customElements.whenDefined("sl-input")]),document.body.style.display="block";const t=document.getElementById("sign-up-form"),n=document.getElementById("username"),a=document.querySelector("#username sl-icon"),s=document.querySelector("#username ~ span.error"),o=document.getElementById("password"),i=document.querySelector("#password sl-icon"),r=document.querySelector("#password ~ span.error"),l=document.getElementById("confirm-password"),c=document.querySelector("#confirm-password sl-icon");document.querySelector("#confirm-password ~ span.error");const d=()=>e(n,usernameErrorMessages),u=e=>(e=>{e.textContent="",e.classList.remove("active"),console.log(e.classList)})(e);function m(){a.classList.remove("hidden"),n.validity.valid?(n.helpText=d(),a.name="check2-circle"):(n.helpText=d(),a.name="exclamation-octagon")}function v(){i.classList.remove("hidden"),o.validity.valid?(o.helpText="",i.name="check2-circle"):(o.helpText=e(o,passwordErrorMessages),i.name="exclamation-octagon"),l.value&&p()}function p(){c.classList.remove("hidden"),o.value!==l.value?(l.setCustomValidity("Passwords Don't Match"),console.log(l.validity)):(l.setCustomValidity(""),o.setCustomValidity("")),l.validity.valid?(l.helpText="",c.name="check2-circle"):(l.helpText=l.validationMessage,c.name="exclamation-octagon")}n.addEventListener("sl-input",(()=>u(s)),{once:!0}),o.addEventListener("sl-input",(()=>u(r)),{once:!0});const y=(e,t)=>{e.addEventListener("sl-change",(e=>{t(),n.removeEventListener("sl-change",m),n.addEventListener("input",m)}))};y(n,m),y(o,v),y(l,p),t.addEventListener("submit",(e=>{n.validity.valid||(e.preventDefault(),m()),o.validity.valid||(e.preventDefault(),v()),l.validity.valid||(e.preventDefault(),p())})),n.addEventListener("input",(e=>{h(e.target.value)}));const h=((e,t)=>{let n;return function(...a){clearTimeout(n),n=setTimeout((()=>e.apply(this,a)),t)}})((async e=>{if(!(e.length<n.minlength))try{const t=await fetch(`http://localhost:3000/validate-username?username=${encodeURIComponent(e)}`);(await t.json()).isAvailable?(n.setCustomValidity(""),m()):(n.setCustomValidity("Username not available"),m())}catch(e){console.error("Error checking username:",e),n.helpText="Error checking username"}}),500);

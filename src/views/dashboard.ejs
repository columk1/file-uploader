<%- include('header') -%>
<div class="overlay">
  <div class="overlay__wrapper">
    <sl-spinner style="font-size: 2rem;"></sl-spinner>
  </div>
</div>
<div class="layout">
  <aside class="layout-sidebar">
    <nav>
      <ul>
        <% if (!locals.type || locals.type === 'FOLDER') { %>
          <li>
            <sl-button class="card-btn new-folder-btn">
              <sl-icon class="card-icon" name="folder-plus"></sl-icon><span>New Folder</span>
            </sl-button>
          </li>
          <li>
            <sl-button class="card-btn new-file-btn">
              <sl-icon class="card-icon" name="file-earmark-plus"></sl-icon><span>New File</span>
            </sl-button>
          </li>
          <li>
            <% if (locals.id) { %> 
            <sl-button class="card-btn delete-folder-btn">
              <sl-icon class="card-icon" name="trash"></sl-icon><span>Delete Folder</span>
            </sl-button>
            <% } %>
          </li>
        <% } else { %>
          <!-- Not a folder -->
        <% } %>
      </ul>
    </nav>
    </br>
    <sl-tree>
      <sl-tree-item expanded <%= locals.id === null && "selected" %>><a href="/"><%= currentUser.username %></a>
        <% function renderTree(items) { %>
          <% items.forEach(item => { %>
            <sl-tree-item
              data-id="<%= item.id %>"
              <%= item.id === locals.id && "selected" %> 
              <%= locals.pathSegments && pathSegments.some(segment => segment.name === item.name) && "expanded" %>
            >
              <a href="/<%= item.id %>"><%= item.name %></a>
              <% if (item.childEntities && item.childEntities.length > 0) { %>
                <%= renderTree(item.childEntities) %>
              <% } %>
            </sl-tree-item>
          <% }); %>
        <% } %>
        <%= renderTree(locals.folders) %>
      </sl-tree-item>
    </sl-tree>
  </aside>
  <main class="layout-main">
    <% if (locals.currentUser) { %>
      <% console.dir(locals.pathSegments) %>
      <!-- <h2 class="title">Welcome back <%= currentUser.username %></h2> -->
      <div class="breadcrumb-container">
        <sl-breadcrumb>
          <sl-breadcrumb-item href="/"><%= `${currentUser.username}` %></sl-breadcrumb-item>
          <% if (locals?.pathSegments?.length > 0) { %>
            <% locals.pathSegments.forEach((segment) => { %>
              <sl-breadcrumb-item href="<%= segment.id %>"><%= segment.name %></sl-breadcrumb-item>
            <% }) %>
          <% } %>
        </sl-breadcrumb>
      </div>
      <!-- <br /> -->
      <div class='grid-container'>
        <div class="grid-header">
          <a href="<%= locals.helpers.generateSortLink(sortQuery, 'name') %>">
            <div class="grid-header-col">
              <div class="grid-col">Name</div>
              <% if (sortQuery.name) { %>
                <sl-icon-button name="<%= sortQuery.name === 'desc' ? 'caret-down' : 'caret-up' %>" label="Sort by name"></sl-icon-button>
              <% } %>
            </div>
          </a>
          <a href="<%= locals.helpers.generateSortLink(sortQuery, 'size') %>">
            <div class="grid-header-col">
              <div class="grid-col">Size</div>
              <% if (sortQuery.size) { %>
                <sl-icon-button name="<%= sortQuery.size === 'desc' ? 'caret-down' : 'caret-up' %>" label="Sort by size"></sl-icon-button>
              <% } %>
            </div>
          </a>
          <a href="<%= locals.helpers.generateSortLink(sortQuery, 'createdAt') %>">
            <div class="grid-header-col">
              <div class="grid-col">Created</div>
              <% if (sortQuery.createdAt) { %>
                <sl-icon-button name="<%= sortQuery.createdAt === 'desc' ? 'caret-down' : 'caret-up' %>" label="Sort by date created"></sl-icon-button>
              <% } %>
            </div>
          </a>
        </div>
        <sl-drawer label="Drawer" class="drawer-overview">
          <div class="drawer-content"></div>
            <sl-button slot="footer" type="submit" class="drawer-download-btn">Download File</sl-button>
          <sl-button slot="footer" variant="primary">Close</sl-button>
        </sl-drawer>
        <% for (var i = 0; i < files.length; i++) {
          let icon = files[i].type === 'FILE' ? 'file-earmark' : 'folder'; %>
          <button 
            <% if (files[i].type === 'FILE') { %>
              data-index="<%= i %>" 
            <% } else { %>
              onclick="window.location.href='/<%= files[i].id %>'" 
            <% } %>
            class="btn grid-row">
            <div class="grid-col col-name">
              <sl-icon class="col-name-icon" name="<%= icon %>"></sl-icon>
              <small><%= files[i].name %></small>
            </div>
            <small class="grid-col">
              <% if (files[i].size) { %>
                <sl-format-bytes value="<%= files[i].size %>"></sl-format-bytes>
              <% } else { %>
                --
              <% } %>
            </small>
            <small class="grid-col"><%= locals.helpers.formatDate(files[i].createdAt) %></small>
          </button>
        <% } %>
      </div>
    <% } else { %>
      <!-- Handle case when there is no currentUser -->
    <% } %>
  </main>
</div>
<div class="mobile-footer">
  <sl-icon-button name="folder-plus" class="new-folder-btn" label="New Folder"></sl-icon-button>
  <sl-icon-button name="file-earmark-plus" class="new-file-btn" label="Upload File"></sl-icon-button>
  <% if (locals.id) { %>
    <sl-icon-button name="trash" class="delete-folder-btn" label="Delete Folder"></sl-icon-button>
    <% } else { %>
      <sl-icon-button name="box-arrow-right" href="/logout" label="Logout"></sl-icon-button>  
  <% } %>
</div>
<sl-dialog label="New Folder" class="dialog-focus new-folder-dialog">
    <form id="new-folder-form"action="/new" method="post">
      <input type="hidden" name="parentId" value="<%= locals.id || null %>"></input>
      <sl-input name="name" label="Name" autofocus placeholder=""></sl-input>
      </br>
      <sl-button type="submit" slot="footer" variant="primary">Create Folder</sl-button>
    </form>
</sl-dialog>
<sl-dialog label="New File" class="dialog-focus new-file-dialog">
  <form id="upload-form"class="upload-form" action="/upload" enctype="multipart/form-data" method="post">
    <sl-progress-bar class="upload-progress" value="0"></sl-progress-bar>
    <div class="form-group">
      <input type="file" name="uploaded_file"></input>
      <input type="hidden" name="parentId" value="<%= id %>"></input>
      </br>
      <sl-button type="submit" slot="footer" variant="primary">Upload</sl-button>
    </div>
  </form>
</sl-dialog>
<sl-dialog label="Delete Folder" class="dialog-focus delete-folder-dialog">
  Are you sure you want to delete the current folder and all of its contents?
  <form id="delete-form" action="<%=`/delete/${id}`%>" method="post">
    
      <input type="hidden" name="parentId" value="<%= parentId %>"></input>
      </br>
      <div class="btn-group">
      <sl-button slot="footer">Cancel</sl-button>
      <sl-button type="submit" slot="footer" variant="primary">Delete</sl-button>
    </div>
  </form>
</sl-dialog>
<script type="module">
  await Promise.allSettled([
    customElements.whenDefined('sl-button'),
    customElements.whenDefined('sl-icon-button'),
    customElements.whenDefined('sl-drawer'),
    customElements.whenDefined('sl-dialog'),
    customElements.whenDefined('sl-tree'),
    customElements.whenDefined('sl-tree-item'),
  ])

  const files = <%- JSON.stringify(locals.files) %>
  const overlay = document.querySelector('.overlay')
  const dialogs = document.querySelectorAll('sl-dialog')
  const newFolderDialog = document.querySelector('.new-folder-dialog')
  const newFileDialog = document.querySelector('.new-file-dialog')
  const deleteFolderDialog = document.querySelector('.delete-folder-dialog')
  const uploadProgressBar = document.querySelector('.upload-progress')
  const uploadForm = document.querySelector('.upload-form')
  const treeItems = document.querySelectorAll('sl-tree-item')

  treeItems.forEach(item => {
    item.addEventListener('click', (e) => {
      console.log(item.selected)
      // if (item.getAttribute('selected')) {
      //   console.log('selected')
      // }
    })
  })
  
  // Upload the file with feedback from xhr
  uploadForm.addEventListener('submit', (event) => {
    event.preventDefault()
    uploadProgressBar.classList.add('active')
    const formData = new FormData(uploadForm)
    const xhr = new XMLHttpRequest()
    xhr.open('POST', '/upload', true)
    
    xhr.upload.addEventListener('progress', (e) => {
      const percentComplete = Math.round((e.loaded / e.total) * 100)
      // The progress will init at 100 for small files but this will start the animation
      uploadProgressBar.value = percentComplete
      // Set indeterminate in case the server takes a while to respond.
      if (percentComplete === 100) {
        setTimeout(() => {
          uploadProgressBar.indeterminate = true
        }, 1000)
      }
    })
    xhr.addEventListener('load', () => {
      if (xhr.status >= 200 && xhr.status < 300) {
          const responseUrl = xhr.responseURL;
          window.location.href = responseUrl;
      }
      newFileDialog.hide()
    })

    xhr.send(formData)
  })

    const newFolderButtons = document.querySelectorAll('.new-folder-btn')
    newFolderButtons.forEach(button => button.addEventListener('click', () => newFolderDialog.show()))

    const newFileButtons = document.querySelectorAll('.new-file-btn')
    newFileButtons.forEach(button => button.addEventListener('click', () => newFileDialog.show()))

    const deleteFolderButtons = document.querySelectorAll('.delete-folder-btn')
    deleteFolderButtons.forEach(button => button.addEventListener('click', () => deleteFolderDialog.show()))

    const closeDeleteFolderDialogButton = deleteFolderDialog.querySelector('sl-button[slot="footer"]')
    closeDeleteFolderDialogButton.addEventListener('click', () => deleteFolderDialog.hide())

  // File info drawer
  const drawer = document.querySelector('.drawer-overview')
  const drawerContent = document.querySelector('.drawer-content')
  const openButtons = document.querySelectorAll('.btn.grid-row[data-index]')
  const downloadButton = drawer.querySelector('.drawer-download-btn')

  openButtons.forEach(button => {
    button.addEventListener('click', () => {
      const index = button.getAttribute('data-index')
      const file = files[index]
      const body = document.createElement('div')
      body.textContent = `File Name: ${file.name}`

      // Repopulate drawer with file info
      drawerContent.replaceChildren(body)
      downloadButton.href = `/download/${file.id}?name=${file.name}&mimeType=${file.mimeType}`

      // Show the drawer
      drawer.show()
    })
  })
  const closeButton = drawer.querySelector('sl-button[variant="primary"]')
  closeButton.addEventListener('click', () => drawer.hide())
  
</script>
<%- include('footer') -%>
